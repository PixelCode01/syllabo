name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: true
        default: 'true'
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies and build
      run: |
        python -m pip install --upgrade pip
        python build-windows.py
        
    - name: Test executable
      run: |
        if (Test-Path "dist\syllabo.exe") {
          dist\syllabo.exe --help
          Write-Host "✓ Windows executable test passed"
        } else {
          Write-Host "✗ Windows executable not found"
          exit 1
        }
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: syllabo-windows
        path: release/*.zip
        
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies and build
      run: |
        python -m pip install --upgrade pip
        python build-linux.py
        
    - name: Test executable
      run: |
        if [ -f "dist/syllabo" ]; then
          ./dist/syllabo --help
          echo "✓ Linux executable test passed"
        else
          echo "✗ Linux executable not found"
          exit 1
        fi
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: syllabo-linux
        path: release/*.tar.gz
        
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies and build
      run: |
        python -m pip install --upgrade pip
        # Use Linux build script for macOS (similar process)
        python build-linux.py
        
    - name: Test executable
      run: |
        if [ -f "dist/syllabo" ]; then
          ./dist/syllabo --help
          echo "✓ macOS executable test passed"
        else
          echo "✗ macOS executable not found"
          exit 1
        fi
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: syllabo-macos
        path: release/*.tar.gz
        
  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(python -c "
          import re
          with open('src/version.py', 'r') as f:
              content = f.read()
              match = re.search(r'VERSION\s*=\s*[\"\\']([^\"\\']*)[\"\\'']', content)
              print('v' + match.group(1) if match else 'v1.0.0')
          " 2>/dev/null || echo "v1.0.0")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Prepare release files
      run: |
        # List downloaded artifacts
        ls -la
        
        # Move and rename files for release
        if [ -f syllabo-windows/*.zip ]; then
          mv syllabo-windows/*.zip syllabo-${{ steps.version.outputs.version }}-Windows.zip
        fi
        
        if [ -f syllabo-linux/*.tar.gz ]; then
          mv syllabo-linux/*.tar.gz syllabo-${{ steps.version.outputs.version }}-Linux.tar.gz
        fi
        
        if [ -f syllabo-macos/*.tar.gz ]; then
          mv syllabo-macos/*.tar.gz syllabo-${{ steps.version.outputs.version }}-macOS.tar.gz
        fi
        
        # List final files
        ls -la *.zip *.tar.gz 2>/dev/null || echo "No release files found"
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        # Syllabo ${{ steps.version.outputs.version }} - AI-Powered Learning Assistant
        
        ## 🎉 What's New
        - Enhanced video search with 70% faster performance
        - Improved quiz generation from content
        - Comprehensive syllabus analysis with detailed summaries
        - First-run setup with Gemini API configuration
        - Multi-line text input for better user experience
        
        ## 📦 Downloads
        Choose the version for your operating system:
        
        ### Windows
        - **syllabo-windows-${{ steps.version.outputs.version }}.zip** - Standalone executable for Windows
        - No Python installation required
        - Double-click `run_syllabo.bat` to start
        
        ### Linux
        - **syllabo-linux-${{ steps.version.outputs.version }}.tar.gz** - Executable for Linux
        - Run `./syllabo` to start
        
        ### macOS
        - **syllabo-macos-${{ steps.version.outputs.version }}.tar.gz** - Executable for macOS
        - Run `./syllabo` to start
        
        ## 🚀 Quick Start
        1. Download the appropriate version for your OS
        2. Extract the archive
        3. Run the executable
        4. Follow the first-run setup wizard
        5. Start analyzing syllabi and generating quizzes!
        
        ## 🔧 Features
        - **Syllabus Analysis**: Extract topics and find learning resources
        - **Quiz Generation**: Create quizzes from any content
        - **Video Search**: Find the best educational videos
        - **Study Goals**: Track your learning progress
        - **Spaced Repetition**: Optimize long-term retention
        - **Multi-Platform**: Search across learning platforms
        
        ## 📚 Documentation
        - [Installation Guide](INSTALLATION.md)
        - [User Guide](README.md)
        - [GitHub Repository](https://github.com/PixelCode01/syllabo)
        
        ## 🐛 Bug Reports
        Found an issue? Please report it on [GitHub Issues](https://github.com/PixelCode01/syllabo/issues)
        
        ---
        
        **Full Changelog**: https://github.com/PixelCode01/syllabo/compare/v1.0.0...${{ steps.version.outputs.version }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Syllabo ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          syllabo-${{ steps.version.outputs.version }}-Windows.zip
          syllabo-${{ steps.version.outputs.version }}-Linux.tar.gz
          syllabo-${{ steps.version.outputs.version }}-macOS.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}